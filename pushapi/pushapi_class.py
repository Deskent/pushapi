# -*- coding: utf-8 -*-
# pylint: disable=import-error
from __future__ import print_function
from collections import namedtuple

# thrift autogenerated modules
import pushapi as pushapi
import pushapi as constants

import pushapi_wrappers as wrappers

HOST_DFL = "10.78.216.60"
PORT_DFL = 9101
NAME_DFL = "Briz_OOO"
TOKEN_DFL = "vvrn3oczp08q1fx34l9y"


class EventDataFromString(wrappers.EventData):
    '''Данные события с содержимым из строки.'''
    def __init__(self, content, attrs=None):
        self.content = content
        super(EventDataFromString, self).__init__(attrs)


class EventDataFromFile(EventDataFromString):
    '''Данные события с подгрузкой из файла.'''
    # В этом примере реализован простейший алгоритм: файл читается целиком.
    # Возможна реализация чтения и отправка файла по чанкам
    def __init__(self, filename, attrs=None):
        with open(filename) as stm:
            content = stm.read()
        super(EventDataFromFile, self).__init__(content, attrs)


def make_event_attributes(evt, event_name):
    '''Пример заполнения списка атрибутов события.
    :param evt: событие
    :param event_name: имя события
    :type event_name: str
    '''
    # Заполняем обязательные атрибуты
    evt.add_mandatory_attributes()
    # необязательный атрибут - имя события
    if event_name:
        evt.add_attribute("event_name", event_name)
    # можно добавить другие атрибуты - evt.add_attribute("my_attr_name", "my_attr_value")


# Классы-надстройки над Identity для создания персон в примерах
class DemoAuthPerson(wrappers.PersonIdentity):
    '''Идентификация персоны с контактами auth и email.'''
    def __init__(self, auth, email):
        '''Формирует идентификацию персоны с контактами auth и email.
        :param auth: имя учетной записи персоны
        :type auth: str
        :param email: адрес электронной почты персоны
        :type email: str
        '''
        # Заполняем контакты: логин, почта, можно добавить скайп и пр.
        contacts = [
            wrappers.AuthContact(auth),
            wrappers.EmailContact(email)
        ]
        super(DemoAuthPerson, self).__init__(contacts)


class DemoEmailPerson(wrappers.PersonIdentity):
    '''Идентификация персоны с контактам email.'''
    def __init__(self, email):
        '''Формирует идентификацию персоны с контактами auth и email.
        :param email: адрес электронной почты персоны
        :type email: str
        '''
        # Заполняем контакт email
        contacts = [
            wrappers.EmailContact(email)
        ]
        super(DemoEmailPerson, self).__init__(contacts)


class DemoSkypePerson(wrappers.PersonIdentity):
    '''Идентификация персоны с контактом skype.'''
    def __init__(self, skype_id):
        '''Формирует идентификацию персоны с контактом skype.
        :param skype_id: идентификатор пользователя в скайпе
        :type skype_id: str
        '''
        super(DemoSkypePerson, self).__init__([wrappers.SkypeContact(skype_id)])


class DemoIcqPerson(wrappers.PersonIdentity):
    '''Идентификация персоны с контактом ICQ.'''
    def __init__(self, icq_id):
        '''Формирует идентификацию персоны с контактом ICQ.
        :param icq_id: идентификатор пользователя в ICQ
        :type icq_id: str
        '''
        super(DemoIcqPerson, self).__init__([wrappers.IcqContact(icq_id)])


# Различные идентификации, используемые в примерах
sender_web = DemoAuthPerson("user1@ws1.mycompany.com", "webuser_mail@mycompany.com")
sender_ws_web = wrappers.ComputerIdentity("example_web.mycompany.com")
receiver_web = wrappers.ResourceIdentity("web.example.com", "path/to/target")
sender_ftp = DemoAuthPerson("user2@ws2.company.com", "ftpuser_mail@mycompany.com")
sender_ws_ftp = wrappers.ComputerIdentity("example_ftp.mycompany.com")
receiver_ftp = wrappers.ResourceIdentity("ftp.example.com", "path/to/remote/file.txt")
sender_copy = DemoAuthPerson("user3@ws3.mycompany.com", "flashuser_mail@mycompany.com")
sender_ws_copy = wrappers.ComputerIdentity("example_copyout.mycompany.com")
receiver_copy = wrappers.DeviceIdentity("My flash drive")
sender_print = DemoAuthPerson("user4@ws4.mycompany.com", "printuser_mail@mycompany.com")
receiver_print = wrappers.DeviceIdentity("MyPrinter")
receiver_email1 = DemoEmailPerson("mailuser1@my_company.com")
receiver_email2 = DemoEmailPerson("mailuser2@example.com")
sender_email = DemoEmailPerson("mailuser3@my_company.com")
receiver_webmail1 = DemoEmailPerson("webmailuser4@my_company.com")
receiver_webmail2 = DemoEmailPerson("webmailuser5@example.com")
sender_webmail = DemoEmailPerson("webmailuser6@my_company.com")
receiver_skype1 = DemoSkypePerson("SkypeReceiver1")
receiver_skype2 = DemoSkypePerson("SkypeReceiver2")
sender_skype = DemoSkypePerson("SkypeSender1")
receiver_icq1 = DemoIcqPerson("IcqReceiver1")
receiver_icq2 = DemoIcqPerson("IcqpeReceiver2")
sender_icq = DemoIcqPerson("IcqSender1")


# Класс для описания сообщения чата
ExampleChatMsg = namedtuple(
    "ExampleChatMsg",
    ["text", "sent_time", "sender_no"]
)

# Класс для описания примера
ExampleDescription = namedtuple(
    "ExampleDescription",
    ["name", "evt_class", "service", "senders", "receivers", "data_file", "data_attrs", "messages"]
)

# Описание примера "событие веб"
demo_web = ExampleDescription(
    name="Web example", # название примера, будет добавлено в атрибуты события
    evt_class=pushapi.EventClass.kWeb, # класс события - kWeb
    service=constants.service_web, # сервис события - "web_common"
    senders=[sender_web, sender_ws_web], # отправители - для примера добавлена персона и компьютер
    receivers=[receiver_web], # получатель - веб-ресурс
    data_file="http1.txt", # пересылаемые данные
    data_attrs=None, # атрибуты данных - не требуются
    messages=None # сообщения чата - должны быть None для событий класса kWeb
)

# Сообщения чата
demo_msg1 = ExampleChatMsg(
    text="message 1 text from cygenic", # текст сообщения
    sent_time="now", # время посылки сообщения
    sender_no=0 # номер отправителя в списке evt_senders
)
demo_msg2 = ExampleChatMsg(
    text="message 2 text from cygenic", # текст сообщения
    sent_time="2020-03-02T13:45:07+03:00", # время посылки сообщения
    sender_no=0 # номер отправителя в списке evt_senders
)
# Описание примера события обмена сообщениями в skype
demo_skype_msg = ExampleDescription(
    name="Skype dialog example", # название примера, будет добавлено в атрибуты события
    evt_class=pushapi.EventClass.kChat, # класс события - kChat
    service=constants.service_im_skype, # сервис события - "im_skype"
    senders=[sender_skype], # отправители - для примера добавлен один пользователь skype
    receivers=[receiver_skype1, receiver_skype2], # получатели - для примера добавлены 2 пользователя skype
    data_file=None, # данные для события класса kChat передаются в списке messages
    data_attrs=None, # данные для события класса kChat передаются в списке messages
    messages=[demo_msg1, demo_msg2] # сообщения чата
)

# Список всех примеров
demo_collection = [
    demo_skype_msg, # Чат: сообщение skye (class=kChat service="im_skype")
]


def make_demo_event(demo_data):
    '''По описанию примера строит объект Event'''
    evt = wrappers.Event(demo_data.evt_class, demo_data.service)
    make_event_attributes(evt, demo_data.name) # атрибуты события
    evt.add_identities(demo_data.senders, demo_data.receivers) # добавляем отправителей и получателей
    # добавляем потоки данных, если они заданы
    if demo_data.data_file:
        evt.evt_data = [EventDataFromFile(demo_data.data_file, demo_data.data_attrs)]
    # добавляем сообщения чата, если они заданы
    if demo_data.messages:
        evt.evt_messages = []
        for msg in demo_data.messages:
            assert msg.sender_no < len(evt.evt_senders) # проверим корректность - такой отправитель есть в списке
            sender_id = evt.evt_senders[msg.sender_no].identity_id # и получим его идентификатор
            # добавим сообщение к списку
            evt.evt_messages.append(wrappers.ChatMessage(sender_id, msg.sent_time, msg.text))
    return evt


class OwnCloud(object):
    '''Класс, отправляющий примеры событий на PushAPI-сервер.
    Attributes:
        event - экземпляр события, которое будет отправлено
        _creds - данные учётной записи (имя компании, токен). Тип: pushapi.Credentials
        _client - клиент PushAPI. Тип: EventProcessor.Client
    '''

    def __init__(
            self,
            event,
            host: str = HOST_DFL,
            port: int = PORT_DFL,
            name: str = NAME_DFL,
            token: str = TOKEN_DFL
    ):
        self._creds = pushapi.Credentials(name, token)

        print(f"Connecting to [{host}:{port}]")
        self._client = wrappers.make_client(host, port)
        print(f"Connecting to [{host}:{port}] OK")
        self._event = event

    def run(self):
        '''Функция проверяет соединение с сервером и отсылает тестовые события.'''
        # проверка версии и токена
        self._check_server()
        # передача на сервер PushAPI всех тестовых событий
        self._run_demo_event(self._event)

    def _check_server(self):
        '''Проверка версии сервера PushAPI и данных учётной записи.'''
        client_version = constants.pushapi_version
        server_version = self._client.GetVersion()
        if server_version < client_version:
            raise RuntimeError("incompatible version: client: %d, server: %d" % (client_version, server_version))
        self._client.VerifyCredentials(self._creds)

    def _run_demo_event(self, event):
        '''Формирование и отправка примера события на сервер.
        :param demo_data: данные примера
        '''
        # формируем трифтовую структуру события
        evt = make_demo_event(event)
        # отсылаем на сервер
        guid = self._send_to_server(evt)
        # сообщаем о выполнении
        print("%s event successfully sent to PushAPI server with guid %s" % (event.name, guid))

    def _send_to_server(self, evt):
        '''Передача на сервер события.
        :param evt: полностью сформированное событие
        :type evt: pushapi.Event
        '''
        event_id = self._client.BeginEvent(evt, self._creds)
        abort_flag = False
        try:
            for data in evt.evt_data:
                stream_id = self._client.BeginStream(event_id, data.data_id)
                try:
                    self._client.SendStreamData(event_id, stream_id, data.content)
                finally:
                    self._client.EndStream(event_id, stream_id)
            guid = self._client.GetEventDatabaseId(event_id)
        except:
            abort_flag = True # ошибка, завершаем событие с флагом abort
            raise
        finally:
            self._client.EndEvent(event_id, abort_flag)
        return guid


if __name__ == '__main__':
    app = OwnCloud(host=HOST_DFL, port=PORT_DFL, name=NAME_DFL, token=TOKEN_DFL)
    app.run()