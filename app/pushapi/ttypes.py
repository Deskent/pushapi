#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class IdentityItemType(object):
    kPerson = 0
    kWorkstation = 1
    kDevice = 2
    kResource = 3

    _VALUES_TO_NAMES = {
        0: "kPerson",
        1: "kWorkstation",
        2: "kDevice",
        3: "kResource",
    }

    _NAMES_TO_VALUES = {
        "kPerson": 0,
        "kWorkstation": 1,
        "kDevice": 2,
        "kResource": 3,
    }


class EventClass(object):
    kChat = 0
    kEmail = 1
    kMfp = 2
    kWeb = 3
    kFileExchange = 4
    kPhoto = 5
    kMultimedia = 6
    kVoiceTalk = 7

    _VALUES_TO_NAMES = {
        0: "kChat",
        1: "kEmail",
        2: "kMfp",
        3: "kWeb",
        4: "kFileExchange",
        5: "kPhoto",
        6: "kMultimedia",
        7: "kVoiceTalk",
    }

    _NAMES_TO_VALUES = {
        "kChat": 0,
        "kEmail": 1,
        "kMfp": 2,
        "kWeb": 3,
        "kFileExchange": 4,
        "kPhoto": 5,
        "kMultimedia": 6,
        "kVoiceTalk": 7,
    }


class Attribute(object):
    """
    Attributes:
     - name
     - value
    """


    def __init__(self, name=None, value=None,):
        self.name = name
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Attribute')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContactWithMeta(object):
    """
    Attributes:
     - contact
     - meta
    """


    def __init__(self, contact=None, meta=None,):
        self.contact = contact
        self.meta = meta

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.contact = Attribute()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.meta = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContactWithMeta')
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 1)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.meta is not None:
            oprot.writeFieldBegin('meta', TType.STRING, 2)
            oprot.writeString(self.meta.encode('utf-8') if sys.version_info[0] == 2 else self.meta)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.contact is None:
            raise TProtocolException(message='Required field contact is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Identity(object):
    """
    Attributes:
     - identity_id
     - identity_type
     - identity_contacts
     - identity_attributes
     - identity_contacts_with_meta
    """


    def __init__(self, identity_id=None, identity_type=None, identity_contacts=None, identity_attributes=None, identity_contacts_with_meta=None,):
        self.identity_id = identity_id
        self.identity_type = identity_type
        self.identity_contacts = identity_contacts
        self.identity_attributes = identity_attributes
        self.identity_contacts_with_meta = identity_contacts_with_meta

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.identity_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.identity_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.identity_contacts = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Attribute()
                        _elem5.read(iprot)
                        self.identity_contacts.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.identity_attributes = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Attribute()
                        _elem11.read(iprot)
                        self.identity_attributes.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.identity_contacts_with_meta = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = ContactWithMeta()
                        _elem17.read(iprot)
                        self.identity_contacts_with_meta.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Identity')
        if self.identity_id is not None:
            oprot.writeFieldBegin('identity_id', TType.I32, 1)
            oprot.writeI32(self.identity_id)
            oprot.writeFieldEnd()
        if self.identity_type is not None:
            oprot.writeFieldBegin('identity_type', TType.I32, 2)
            oprot.writeI32(self.identity_type)
            oprot.writeFieldEnd()
        if self.identity_contacts is not None:
            oprot.writeFieldBegin('identity_contacts', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.identity_contacts))
            for iter18 in self.identity_contacts:
                iter18.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.identity_attributes is not None:
            oprot.writeFieldBegin('identity_attributes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.identity_attributes))
            for iter19 in self.identity_attributes:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.identity_contacts_with_meta is not None:
            oprot.writeFieldBegin('identity_contacts_with_meta', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.identity_contacts_with_meta))
            for iter20 in self.identity_contacts_with_meta:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.identity_id is None:
            raise TProtocolException(message='Required field identity_id is unset!')
        if self.identity_type is None:
            raise TProtocolException(message='Required field identity_type is unset!')
        if self.identity_contacts is None:
            raise TProtocolException(message='Required field identity_contacts is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventData(object):
    """
    Attributes:
     - data_id
     - data_attributes
    """


    def __init__(self, data_id=None, data_attributes=None,):
        self.data_id = data_id
        self.data_attributes = data_attributes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.data_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.data_attributes = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Attribute()
                        _elem26.read(iprot)
                        self.data_attributes.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventData')
        if self.data_id is not None:
            oprot.writeFieldBegin('data_id', TType.I32, 1)
            oprot.writeI32(self.data_id)
            oprot.writeFieldEnd()
        if self.data_attributes is not None:
            oprot.writeFieldBegin('data_attributes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.data_attributes))
            for iter27 in self.data_attributes:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.data_id is None:
            raise TProtocolException(message='Required field data_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatMessage(object):
    """
    Attributes:
     - sender_id
     - sent_time
     - utf8_text
     - mes_data_id
    """


    def __init__(self, sender_id=None, sent_time=None, utf8_text=None, mes_data_id=None,):
        self.sender_id = sender_id
        self.sent_time = sent_time
        self.utf8_text = utf8_text
        self.mes_data_id = mes_data_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sender_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sent_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.utf8_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mes_data_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatMessage')
        if self.sender_id is not None:
            oprot.writeFieldBegin('sender_id', TType.I32, 1)
            oprot.writeI32(self.sender_id)
            oprot.writeFieldEnd()
        if self.sent_time is not None:
            oprot.writeFieldBegin('sent_time', TType.STRING, 2)
            oprot.writeString(self.sent_time.encode('utf-8') if sys.version_info[0] == 2 else self.sent_time)
            oprot.writeFieldEnd()
        if self.utf8_text is not None:
            oprot.writeFieldBegin('utf8_text', TType.STRING, 3)
            oprot.writeString(self.utf8_text.encode('utf-8') if sys.version_info[0] == 2 else self.utf8_text)
            oprot.writeFieldEnd()
        if self.mes_data_id is not None:
            oprot.writeFieldBegin('mes_data_id', TType.I32, 4)
            oprot.writeI32(self.mes_data_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sender_id is None:
            raise TProtocolException(message='Required field sender_id is unset!')
        if self.sent_time is None:
            raise TProtocolException(message='Required field sent_time is unset!')
        if self.utf8_text is None:
            raise TProtocolException(message='Required field utf8_text is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ItemLink(object):
    """
    Attributes:
     - id
     - link_to_id
     - link_name
    """


    def __init__(self, id=None, link_to_id=None, link_name=None,):
        self.id = id
        self.link_to_id = link_to_id
        self.link_name = link_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.link_to_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.link_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ItemLink')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.link_to_id is not None:
            oprot.writeFieldBegin('link_to_id', TType.I32, 2)
            oprot.writeI32(self.link_to_id)
            oprot.writeFieldEnd()
        if self.link_name is not None:
            oprot.writeFieldBegin('link_name', TType.STRING, 3)
            oprot.writeString(self.link_name.encode('utf-8') if sys.version_info[0] == 2 else self.link_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.link_to_id is None:
            raise TProtocolException(message='Required field link_to_id is unset!')
        if self.link_name is None:
            raise TProtocolException(message='Required field link_name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Event(object):
    """
    Attributes:
     - evt_class
     - evt_service
     - evt_attributes
     - evt_senders
     - evt_receivers
     - evt_data
     - evt_messages
     - evt_links
     - evt_source
     - evt_destination
    """


    def __init__(self, evt_class=None, evt_service=None, evt_attributes=None, evt_senders=None, evt_receivers=None, evt_data=None, evt_messages=None, evt_links=None, evt_source=None, evt_destination=None,):
        self.evt_class = evt_class
        self.evt_service = evt_service
        self.evt_attributes = evt_attributes
        self.evt_senders = evt_senders
        self.evt_receivers = evt_receivers
        self.evt_data = evt_data
        self.evt_messages = evt_messages
        self.evt_links = evt_links
        self.evt_source = evt_source
        self.evt_destination = evt_destination

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.evt_class = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.evt_service = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.evt_attributes = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = Attribute()
                        _elem33.read(iprot)
                        self.evt_attributes.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.evt_senders = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = Identity()
                        _elem39.read(iprot)
                        self.evt_senders.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.evt_receivers = []
                    (_etype43, _size40) = iprot.readListBegin()
                    for _i44 in range(_size40):
                        _elem45 = Identity()
                        _elem45.read(iprot)
                        self.evt_receivers.append(_elem45)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.evt_data = []
                    (_etype49, _size46) = iprot.readListBegin()
                    for _i50 in range(_size46):
                        _elem51 = EventData()
                        _elem51.read(iprot)
                        self.evt_data.append(_elem51)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.evt_messages = []
                    (_etype55, _size52) = iprot.readListBegin()
                    for _i56 in range(_size52):
                        _elem57 = ChatMessage()
                        _elem57.read(iprot)
                        self.evt_messages.append(_elem57)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.evt_links = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = ItemLink()
                        _elem63.read(iprot)
                        self.evt_links.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.evt_source = Identity()
                    self.evt_source.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.evt_destination = Identity()
                    self.evt_destination.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Event')
        if self.evt_class is not None:
            oprot.writeFieldBegin('evt_class', TType.I32, 1)
            oprot.writeI32(self.evt_class)
            oprot.writeFieldEnd()
        if self.evt_service is not None:
            oprot.writeFieldBegin('evt_service', TType.STRING, 2)
            oprot.writeString(self.evt_service.encode('utf-8') if sys.version_info[0] == 2 else self.evt_service)
            oprot.writeFieldEnd()
        if self.evt_attributes is not None:
            oprot.writeFieldBegin('evt_attributes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.evt_attributes))
            for iter64 in self.evt_attributes:
                iter64.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.evt_senders is not None:
            oprot.writeFieldBegin('evt_senders', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.evt_senders))
            for iter65 in self.evt_senders:
                iter65.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.evt_receivers is not None:
            oprot.writeFieldBegin('evt_receivers', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.evt_receivers))
            for iter66 in self.evt_receivers:
                iter66.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.evt_data is not None:
            oprot.writeFieldBegin('evt_data', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.evt_data))
            for iter67 in self.evt_data:
                iter67.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.evt_links is not None:
            oprot.writeFieldBegin('evt_links', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.evt_links))
            for iter68 in self.evt_links:
                iter68.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.evt_messages is not None:
            oprot.writeFieldBegin('evt_messages', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.evt_messages))
            for iter69 in self.evt_messages:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.evt_source is not None:
            oprot.writeFieldBegin('evt_source', TType.STRUCT, 9)
            self.evt_source.write(oprot)
            oprot.writeFieldEnd()
        if self.evt_destination is not None:
            oprot.writeFieldBegin('evt_destination', TType.STRUCT, 10)
            self.evt_destination.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.evt_class is None:
            raise TProtocolException(message='Required field evt_class is unset!')
        if self.evt_service is None:
            raise TProtocolException(message='Required field evt_service is unset!')
        if self.evt_senders is None:
            raise TProtocolException(message='Required field evt_senders is unset!')
        if self.evt_receivers is None:
            raise TProtocolException(message='Required field evt_receivers is unset!')
        if self.evt_data is None:
            raise TProtocolException(message='Required field evt_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Credentials(object):
    """
    Attributes:
     - company_name
     - token
    """


    def __init__(self, company_name=None, token=None,):
        self.company_name = company_name
        self.token = token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.company_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Credentials')
        if self.company_name is not None:
            oprot.writeFieldBegin('company_name', TType.STRING, 1)
            oprot.writeString(self.company_name.encode('utf-8') if sys.version_info[0] == 2 else self.company_name)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.company_name is None:
            raise TProtocolException(message='Required field company_name is unset!')
        if self.token is None:
            raise TProtocolException(message='Required field token is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventNotFound(TException):
    """
    Attributes:
     - message
    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventNotFound')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataNotFound(TException):
    """
    Attributes:
     - message
    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataNotFound')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StreamNotFound(TException):
    """
    Attributes:
     - message
    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StreamNotFound')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidEventFormat(TException):
    """
    Attributes:
     - message
    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidEventFormat')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidCredentials(TException):
    """
    Attributes:
     - message
    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidCredentials')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LicenseError(TException):
    """
    Attributes:
     - message
    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LicenseError')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Attribute)
Attribute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
)
all_structs.append(ContactWithMeta)
ContactWithMeta.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'contact', [Attribute, None], None, ),  # 1
    (2, TType.STRING, 'meta', 'UTF8', None, ),  # 2
)
all_structs.append(Identity)
Identity.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'identity_id', None, None, ),  # 1
    (2, TType.I32, 'identity_type', None, None, ),  # 2
    (3, TType.LIST, 'identity_contacts', (TType.STRUCT, [Attribute, None], False), None, ),  # 3
    (4, TType.LIST, 'identity_attributes', (TType.STRUCT, [Attribute, None], False), None, ),  # 4
    (5, TType.LIST, 'identity_contacts_with_meta', (TType.STRUCT, [ContactWithMeta, None], False), None, ),  # 5
)
all_structs.append(EventData)
EventData.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'data_id', None, None, ),  # 1
    (2, TType.LIST, 'data_attributes', (TType.STRUCT, [Attribute, None], False), None, ),  # 2
)
all_structs.append(ChatMessage)
ChatMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sender_id', None, None, ),  # 1
    (2, TType.STRING, 'sent_time', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'utf8_text', 'UTF8', None, ),  # 3
    (4, TType.I32, 'mes_data_id', None, None, ),  # 4
)
all_structs.append(ItemLink)
ItemLink.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.I32, 'link_to_id', None, None, ),  # 2
    (3, TType.STRING, 'link_name', 'UTF8', None, ),  # 3
)
all_structs.append(Event)
Event.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'evt_class', None, None, ),  # 1
    (2, TType.STRING, 'evt_service', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'evt_attributes', (TType.STRUCT, [Attribute, None], False), None, ),  # 3
    (4, TType.LIST, 'evt_senders', (TType.STRUCT, [Identity, None], False), None, ),  # 4
    (5, TType.LIST, 'evt_receivers', (TType.STRUCT, [Identity, None], False), None, ),  # 5
    (6, TType.LIST, 'evt_data', (TType.STRUCT, [EventData, None], False), None, ),  # 6
    (7, TType.LIST, 'evt_links', (TType.STRUCT, [ItemLink, None], False), None, ),  # 7
    (8, TType.LIST, 'evt_messages', (TType.STRUCT, [ChatMessage, None], False), None, ),  # 8
    (9, TType.STRUCT, 'evt_source', [Identity, None], None, ),  # 9
    (10, TType.STRUCT, 'evt_destination', [Identity, None], None, ),  # 10
)
all_structs.append(Credentials)
Credentials.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'company_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'token', 'UTF8', None, ),  # 2
)
all_structs.append(EventNotFound)
EventNotFound.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(DataNotFound)
DataNotFound.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(StreamNotFound)
StreamNotFound.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(InvalidEventFormat)
InvalidEventFormat.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(InvalidCredentials)
InvalidCredentials.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(LicenseError)
LicenseError.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
