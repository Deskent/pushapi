#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def GetVersion(self):
        pass

    def VerifyCredentials(self, cred):
        """
        Parameters:
         - cred
        """
        pass

    def BeginEvent(self, event, cred):
        """
        Parameters:
         - event
         - cred
        """
        pass

    def BeginStream(self, event_id, object_data_id):
        """
        Parameters:
         - event_id
         - object_data_id
        """
        pass

    def SendStreamData(self, event_id, stream_id, chunk):
        """
        Parameters:
         - event_id
         - stream_id
         - chunk
        """
        pass

    def EndStream(self, event_id, stream_id):
        """
        Parameters:
         - event_id
         - stream_id
        """
        pass

    def GetEventDatabaseId(self, event_id):
        """
        Parameters:
         - event_id
        """
        pass

    def EndEvent(self, event_id, abort):
        """
        Parameters:
         - event_id
         - abort
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def GetVersion(self):
        self.send_GetVersion()
        return self.recv_GetVersion()

    def send_GetVersion(self):
        self._oprot.writeMessageBegin('GetVersion', TMessageType.CALL, self._seqid)
        args = GetVersion_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetVersion(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetVersion_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetVersion failed: unknown result")

    def VerifyCredentials(self, cred):
        """
        Parameters:
         - cred
        """
        self.send_VerifyCredentials(cred)
        self.recv_VerifyCredentials()

    def send_VerifyCredentials(self, cred):
        self._oprot.writeMessageBegin('VerifyCredentials', TMessageType.CALL, self._seqid)
        args = VerifyCredentials_args()
        args.cred = cred
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_VerifyCredentials(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = VerifyCredentials_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def BeginEvent(self, event, cred):
        """
        Parameters:
         - event
         - cred
        """
        self.send_BeginEvent(event, cred)
        return self.recv_BeginEvent()

    def send_BeginEvent(self, event, cred):
        self._oprot.writeMessageBegin('BeginEvent', TMessageType.CALL, self._seqid)
        args = BeginEvent_args()
        args.event = event
        args.cred = cred
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_BeginEvent(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = BeginEvent_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        if result.ex3 is not None:
            raise result.ex3
        if result.ex4 is not None:
            raise result.ex4
        if result.ex5 is not None:
            raise result.ex5
        raise TApplicationException(TApplicationException.MISSING_RESULT, "BeginEvent failed: unknown result")

    def BeginStream(self, event_id, object_data_id):
        """
        Parameters:
         - event_id
         - object_data_id
        """
        self.send_BeginStream(event_id, object_data_id)
        return self.recv_BeginStream()

    def send_BeginStream(self, event_id, object_data_id):
        self._oprot.writeMessageBegin('BeginStream', TMessageType.CALL, self._seqid)
        args = BeginStream_args()
        args.event_id = event_id
        args.object_data_id = object_data_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_BeginStream(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = BeginStream_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "BeginStream failed: unknown result")

    def SendStreamData(self, event_id, stream_id, chunk):
        """
        Parameters:
         - event_id
         - stream_id
         - chunk
        """
        self.send_SendStreamData(event_id, stream_id, chunk)
        self.recv_SendStreamData()

    def send_SendStreamData(self, event_id, stream_id, chunk):
        self._oprot.writeMessageBegin('SendStreamData', TMessageType.CALL, self._seqid)
        args = SendStreamData_args()
        args.event_id = event_id
        args.stream_id = stream_id
        args.chunk = chunk
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SendStreamData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SendStreamData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        if result.ex3 is not None:
            raise result.ex3
        return

    def EndStream(self, event_id, stream_id):
        """
        Parameters:
         - event_id
         - stream_id
        """
        self.send_EndStream(event_id, stream_id)
        self.recv_EndStream()

    def send_EndStream(self, event_id, stream_id):
        self._oprot.writeMessageBegin('EndStream', TMessageType.CALL, self._seqid)
        args = EndStream_args()
        args.event_id = event_id
        args.stream_id = stream_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_EndStream(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = EndStream_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        if result.ex3 is not None:
            raise result.ex3
        return

    def GetEventDatabaseId(self, event_id):
        """
        Parameters:
         - event_id
        """
        self.send_GetEventDatabaseId(event_id)
        return self.recv_GetEventDatabaseId()

    def send_GetEventDatabaseId(self, event_id):
        self._oprot.writeMessageBegin('GetEventDatabaseId', TMessageType.CALL, self._seqid)
        args = GetEventDatabaseId_args()
        args.event_id = event_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetEventDatabaseId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetEventDatabaseId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex1 is not None:
            raise result.ex1
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetEventDatabaseId failed: unknown result")

    def EndEvent(self, event_id, abort):
        """
        Parameters:
         - event_id
         - abort
        """
        print("Send EndEvent")
        self.send_EndEvent(event_id, abort)
        print("Send recv_EndEvent")
        self.recv_EndEvent()
        print("Endof")

    def send_EndEvent(self, event_id, abort):
        self._oprot.writeMessageBegin('EndEvent', TMessageType.CALL, self._seqid)
        args = EndEvent_args()
        args.event_id = event_id
        args.abort = abort
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_EndEvent(self):
        iprot = self._iprot
        print("Read Message Begin")
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            print("read")
            x.read(iprot)
            print("Read Message End")
            iprot.readMessageEnd()
            raise x

        print("Result creation")
        result = EndEvent_result()
        print("Result read")
        result.read(iprot)
        print("Result readMessageEnd")
        iprot.readMessageEnd()
        if result.ex1 is not None:
            raise result.ex1
        if result.ex2 is not None:
            raise result.ex2
        if result.ex3 is not None:
            raise result.ex3
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["GetVersion"] = Processor.process_GetVersion
        self._processMap["VerifyCredentials"] = Processor.process_VerifyCredentials
        self._processMap["BeginEvent"] = Processor.process_BeginEvent
        self._processMap["BeginStream"] = Processor.process_BeginStream
        self._processMap["SendStreamData"] = Processor.process_SendStreamData
        self._processMap["EndStream"] = Processor.process_EndStream
        self._processMap["GetEventDatabaseId"] = Processor.process_GetEventDatabaseId
        self._processMap["EndEvent"] = Processor.process_EndEvent

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_GetVersion(self, seqid, iprot, oprot):
        args = GetVersion_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetVersion_result()
        try:
            result.success = self._handler.GetVersion()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetVersion", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_VerifyCredentials(self, seqid, iprot, oprot):
        args = VerifyCredentials_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = VerifyCredentials_result()
        try:
            self._handler.VerifyCredentials(args.cred)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidCredentials as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("VerifyCredentials", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_BeginEvent(self, seqid, iprot, oprot):
        args = BeginEvent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = BeginEvent_result()
        try:
            result.success = self._handler.BeginEvent(args.event, args.cred)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidEventFormat as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except InvalidCredentials as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except LicenseError as ex3:
            msg_type = TMessageType.REPLY
            result.ex3 = ex3
        except EventNotFound as ex4:
            msg_type = TMessageType.REPLY
            result.ex4 = ex4
        except DataNotFound as ex5:
            msg_type = TMessageType.REPLY
            result.ex5 = ex5
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("BeginEvent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_BeginStream(self, seqid, iprot, oprot):
        args = BeginStream_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = BeginStream_result()
        try:
            result.success = self._handler.BeginStream(args.event_id, args.object_data_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except EventNotFound as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except DataNotFound as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("BeginStream", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SendStreamData(self, seqid, iprot, oprot):
        args = SendStreamData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SendStreamData_result()
        try:
            self._handler.SendStreamData(args.event_id, args.stream_id, args.chunk)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except EventNotFound as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except StreamNotFound as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except InvalidEventFormat as ex3:
            msg_type = TMessageType.REPLY
            result.ex3 = ex3
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SendStreamData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_EndStream(self, seqid, iprot, oprot):
        args = EndStream_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = EndStream_result()
        try:
            self._handler.EndStream(args.event_id, args.stream_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except EventNotFound as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except StreamNotFound as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except InvalidEventFormat as ex3:
            msg_type = TMessageType.REPLY
            result.ex3 = ex3
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("EndStream", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetEventDatabaseId(self, seqid, iprot, oprot):
        args = GetEventDatabaseId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetEventDatabaseId_result()
        try:
            result.success = self._handler.GetEventDatabaseId(args.event_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except EventNotFound as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetEventDatabaseId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_EndEvent(self, seqid, iprot, oprot):
        args = EndEvent_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = EndEvent_result()
        try:
            self._handler.EndEvent(args.event_id, args.abort)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except EventNotFound as ex1:
            msg_type = TMessageType.REPLY
            result.ex1 = ex1
        except InvalidEventFormat as ex2:
            msg_type = TMessageType.REPLY
            result.ex2 = ex2
        except LicenseError as ex3:
            msg_type = TMessageType.REPLY
            result.ex3 = ex3
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("EndEvent", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class GetVersion_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetVersion_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetVersion_args)
GetVersion_args.thrift_spec = (
)


class GetVersion_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetVersion_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetVersion_result)
GetVersion_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class VerifyCredentials_args(object):
    """
    Attributes:
     - cred
    """


    def __init__(self, cred=None,):
        self.cred = cred

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cred = Credentials()
                    self.cred.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyCredentials_args')
        if self.cred is not None:
            oprot.writeFieldBegin('cred', TType.STRUCT, 1)
            self.cred.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(VerifyCredentials_args)
VerifyCredentials_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cred', [Credentials, None], None, ),  # 1
)


class VerifyCredentials_result(object):
    """
    Attributes:
     - ex
    """


    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = InvalidCredentials()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyCredentials_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(VerifyCredentials_result)
VerifyCredentials_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ex', [InvalidCredentials, None], None, ),  # 1
)


class BeginEvent_args(object):
    """
    Attributes:
     - event
     - cred
    """


    def __init__(self, event=None, cred=None,):
        self.event = event
        self.cred = cred

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.event = Event()
                    self.event.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cred = Credentials()
                    self.cred.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BeginEvent_args')
        if self.event is not None:
            oprot.writeFieldBegin('event', TType.STRUCT, 1)
            self.event.write(oprot)
            oprot.writeFieldEnd()
        if self.cred is not None:
            oprot.writeFieldBegin('cred', TType.STRUCT, 2)
            self.cred.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(BeginEvent_args)
BeginEvent_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'event', [Event, None], None, ),  # 1
    (2, TType.STRUCT, 'cred', [Credentials, None], None, ),  # 2
)


class BeginEvent_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
     - ex3
     - ex4
     - ex5
    """


    def __init__(self, success=None, ex1=None, ex2=None, ex3=None, ex4=None, ex5=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2
        self.ex3 = ex3
        self.ex4 = ex4
        self.ex5 = ex5

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = InvalidEventFormat()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = InvalidCredentials()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ex3 = LicenseError()
                    self.ex3.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ex4 = EventNotFound()
                    self.ex4.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ex5 = DataNotFound()
                    self.ex5.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BeginEvent_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        if self.ex3 is not None:
            oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
            self.ex3.write(oprot)
            oprot.writeFieldEnd()
        if self.ex4 is not None:
            oprot.writeFieldBegin('ex4', TType.STRUCT, 4)
            self.ex4.write(oprot)
            oprot.writeFieldEnd()
        if self.ex5 is not None:
            oprot.writeFieldBegin('ex5', TType.STRUCT, 5)
            self.ex5.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(BeginEvent_result)
BeginEvent_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [InvalidEventFormat, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [InvalidCredentials, None], None, ),  # 2
    (3, TType.STRUCT, 'ex3', [LicenseError, None], None, ),  # 3
    (4, TType.STRUCT, 'ex4', [EventNotFound, None], None, ),  # 4
    (5, TType.STRUCT, 'ex5', [DataNotFound, None], None, ),  # 5
)


class BeginStream_args(object):
    """
    Attributes:
     - event_id
     - object_data_id
    """


    def __init__(self, event_id=None, object_data_id=None,):
        self.event_id = event_id
        self.object_data_id = object_data_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.event_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.object_data_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BeginStream_args')
        if self.event_id is not None:
            oprot.writeFieldBegin('event_id', TType.I64, 1)
            oprot.writeI64(self.event_id)
            oprot.writeFieldEnd()
        if self.object_data_id is not None:
            oprot.writeFieldBegin('object_data_id', TType.I32, 2)
            oprot.writeI32(self.object_data_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(BeginStream_args)
BeginStream_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'event_id', None, None, ),  # 1
    (2, TType.I32, 'object_data_id', None, None, ),  # 2
)


class BeginStream_result(object):
    """
    Attributes:
     - success
     - ex1
     - ex2
    """


    def __init__(self, success=None, ex1=None, ex2=None,):
        self.success = success
        self.ex1 = ex1
        self.ex2 = ex2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = EventNotFound()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = DataNotFound()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BeginStream_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(BeginStream_result)
BeginStream_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ex1', [EventNotFound, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [DataNotFound, None], None, ),  # 2
)


class SendStreamData_args(object):
    """
    Attributes:
     - event_id
     - stream_id
     - chunk
    """


    def __init__(self, event_id=None, stream_id=None, chunk=None,):
        self.event_id = event_id
        self.stream_id = stream_id
        self.chunk = chunk

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.event_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.stream_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.chunk = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SendStreamData_args')
        if self.event_id is not None:
            oprot.writeFieldBegin('event_id', TType.I64, 1)
            oprot.writeI64(self.event_id)
            oprot.writeFieldEnd()
        if self.stream_id is not None:
            oprot.writeFieldBegin('stream_id', TType.I64, 2)
            oprot.writeI64(self.stream_id)
            oprot.writeFieldEnd()
        if self.chunk is not None:
            oprot.writeFieldBegin('chunk', TType.STRING, 3)
            oprot.writeBinary(self.chunk)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SendStreamData_args)
SendStreamData_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'event_id', None, None, ),  # 1
    (2, TType.I64, 'stream_id', None, None, ),  # 2
    (3, TType.STRING, 'chunk', 'BINARY', None, ),  # 3
)


class SendStreamData_result(object):
    """
    Attributes:
     - ex1
     - ex2
     - ex3
    """


    def __init__(self, ex1=None, ex2=None, ex3=None,):
        self.ex1 = ex1
        self.ex2 = ex2
        self.ex3 = ex3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = EventNotFound()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = StreamNotFound()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ex3 = InvalidEventFormat()
                    self.ex3.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SendStreamData_result')
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        if self.ex3 is not None:
            oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
            self.ex3.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SendStreamData_result)
SendStreamData_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ex1', [EventNotFound, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [StreamNotFound, None], None, ),  # 2
    (3, TType.STRUCT, 'ex3', [InvalidEventFormat, None], None, ),  # 3
)


class EndStream_args(object):
    """
    Attributes:
     - event_id
     - stream_id
    """


    def __init__(self, event_id=None, stream_id=None,):
        self.event_id = event_id
        self.stream_id = stream_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.event_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.stream_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EndStream_args')
        if self.event_id is not None:
            oprot.writeFieldBegin('event_id', TType.I64, 1)
            oprot.writeI64(self.event_id)
            oprot.writeFieldEnd()
        if self.stream_id is not None:
            oprot.writeFieldBegin('stream_id', TType.I64, 2)
            oprot.writeI64(self.stream_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(EndStream_args)
EndStream_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'event_id', None, None, ),  # 1
    (2, TType.I64, 'stream_id', None, None, ),  # 2
)


class EndStream_result(object):
    """
    Attributes:
     - ex1
     - ex2
     - ex3
    """


    def __init__(self, ex1=None, ex2=None, ex3=None,):
        self.ex1 = ex1
        self.ex2 = ex2
        self.ex3 = ex3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = EventNotFound()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = StreamNotFound()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ex3 = InvalidEventFormat()
                    self.ex3.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EndStream_result')
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        if self.ex3 is not None:
            oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
            self.ex3.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(EndStream_result)
EndStream_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ex1', [EventNotFound, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [StreamNotFound, None], None, ),  # 2
    (3, TType.STRUCT, 'ex3', [InvalidEventFormat, None], None, ),  # 3
)


class GetEventDatabaseId_args(object):
    """
    Attributes:
     - event_id
    """


    def __init__(self, event_id=None,):
        self.event_id = event_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.event_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetEventDatabaseId_args')
        if self.event_id is not None:
            oprot.writeFieldBegin('event_id', TType.I64, 1)
            oprot.writeI64(self.event_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetEventDatabaseId_args)
GetEventDatabaseId_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'event_id', None, None, ),  # 1
)


class GetEventDatabaseId_result(object):
    """
    Attributes:
     - success
     - ex1
    """


    def __init__(self, success=None, ex1=None,):
        self.success = success
        self.ex1 = ex1

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = EventNotFound()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetEventDatabaseId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetEventDatabaseId_result)
GetEventDatabaseId_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'ex1', [EventNotFound, None], None, ),  # 1
)


class EndEvent_args(object):
    """
    Attributes:
     - event_id
     - abort
    """


    def __init__(self, event_id=None, abort=None,):
        self.event_id = event_id
        self.abort = abort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.event_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.abort = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EndEvent_args')
        if self.event_id is not None:
            oprot.writeFieldBegin('event_id', TType.I64, 1)
            oprot.writeI64(self.event_id)
            oprot.writeFieldEnd()
        if self.abort is not None:
            oprot.writeFieldBegin('abort', TType.BOOL, 2)
            oprot.writeBool(self.abort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(EndEvent_args)
EndEvent_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'event_id', None, None, ),  # 1
    (2, TType.BOOL, 'abort', None, None, ),  # 2
)


class EndEvent_result(object):
    """
    Attributes:
     - ex1
     - ex2
     - ex3
    """


    def __init__(self, ex1=None, ex2=None, ex3=None,):
        self.ex1 = ex1
        self.ex2 = ex2
        self.ex3 = ex3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex1 = EventNotFound()
                    self.ex1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ex2 = InvalidEventFormat()
                    self.ex2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ex3 = LicenseError()
                    self.ex3.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EndEvent_result')
        if self.ex1 is not None:
            oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
            self.ex1.write(oprot)
            oprot.writeFieldEnd()
        if self.ex2 is not None:
            oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
            self.ex2.write(oprot)
            oprot.writeFieldEnd()
        if self.ex3 is not None:
            oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
            self.ex3.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(EndEvent_result)
EndEvent_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ex1', [EventNotFound, None], None, ),  # 1
    (2, TType.STRUCT, 'ex2', [InvalidEventFormat, None], None, ),  # 2
    (3, TType.STRUCT, 'ex3', [LicenseError, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs

